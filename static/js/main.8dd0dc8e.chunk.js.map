{"version":3,"sources":["state/appContext.js","state/appReducer.js","state/AppState.js","components/Filter.js","components/Games.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["AppContext","createContext","state","type","payload","apiData","filteredList","AppState","props","useReducer","appReducer","dispatch","useEffect","onApi","fetch","then","response","a","json","res","shift","catch","error","console","log","Provider","value","onFilter","filterTerm","resObj","filter","obj","platform","children","Filter","useContext","className","onClick","Games","map","i","k","key","title","genre","score","Header","id","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.8dd0dc8e.chunk.js","sourcesContent":["import { createContext } from \"react\";\r\n\r\nconst AppContext = createContext();\r\n\r\nexport default AppContext;\r\n","export default (state, { type, payload }) => {\r\n  switch (type) {\r\n    case \"LOAD_API_DATA\":\r\n      return {\r\n        ...state,\r\n        apiData: payload,\r\n      };\r\n\r\n    case \"FILTERED_LIST\":\r\n      return {\r\n        ...state,\r\n        filteredList: payload,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React, { useReducer, useEffect } from \"react\";\r\n//context\r\nimport AppContext from \"./appContext\";\r\nimport appReducer from \"./appReducer\";\r\n\r\nconst AppState = (props) => {\r\n  const initialState = {\r\n    apiData: null,\r\n    filteredList: null,\r\n  };\r\n\r\n  const [state, dispatch] = useReducer(appReducer, initialState);\r\n  const { apiData, filteredList } = state;\r\n\r\n  useEffect(() => {\r\n    if (!apiData) {\r\n      onApi();\r\n    }\r\n  }, [apiData, filteredList]);\r\n\r\n  const onApi = () => {\r\n    fetch(`http://starlord.hackerearth.com/gamesarena`)\r\n      .then(async (response) => {\r\n        let res = await response.json();\r\n        res.shift();\r\n        dispatch({ type: \"LOAD_API_DATA\", payload: res });\r\n      })\r\n      .catch((error) => console.log(\"Fetch Error:\", error));\r\n  };\r\n\r\n  const onFilter = (filterTerm) => {\r\n    if (filterTerm === \"All\") {\r\n      dispatch({\r\n        type: \"FILTERED_LIST\",\r\n        payload: apiData,\r\n      });\r\n    } else {\r\n      let resObj = apiData.filter((obj) => obj.platform === filterTerm);\r\n\r\n      dispatch({\r\n        type: \"FILTERED_LIST\",\r\n        payload: resObj,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AppContext.Provider\r\n      value={{\r\n        apiData: state.apiData,\r\n        filteredList: state.filteredList,\r\n        onFilter,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </AppContext.Provider>\r\n  );\r\n};\r\nexport default AppState;\r\n","import React, { useContext } from \"react\";\r\nimport AppContext from \"../state/appContext\";\r\n\r\nconst Filter = () => {\r\n  const state = useContext(AppContext);\r\n  const { onFilter } = state;\r\n\r\n  return (\r\n    <div className=\"FilterArea\">\r\n      <button onClick={() => onFilter(\"PlayStation Vita\")}>\r\n        PlayStation Vita\r\n      </button>\r\n      <button onClick={() => onFilter(\"iPad\")}>iPad</button>\r\n      <button onClick={() => onFilter(\"Xbox 360\")}>Xbox 360</button>\r\n      <button onClick={() => onFilter(\"PlayStation 3\")}>PlayStation 3</button>\r\n      <button onClick={() => onFilter(\"Macintosh\")}>Macintosh</button>\r\n      <button onClick={() => onFilter(\"PC\")}>PC</button>\r\n      <button onClick={() => onFilter(\"iPhone\")}>iPhone</button>\r\n      <button onClick={() => onFilter(\"Nintendo DS\")}>Nintendo DS</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n","import React, { useContext } from \"react\";\r\nimport AppContext from \"../state/appContext\";\r\n\r\nconst Games = () => {\r\n  const state = useContext(AppContext);\r\n  const { apiData, filteredList } = state;\r\n\r\n  if (apiData && !filteredList) {\r\n    return (\r\n      apiData &&\r\n      apiData.map((i, k) => (\r\n        <div key={k} className=\"GameItem\">\r\n          <h5>{i.title}</h5>\r\n          <p>Genre: {i.genre}</p>\r\n          <p>Platform: {i.platform}</p>\r\n          <p>Score: {i.score}</p>\r\n        </div>\r\n      ))\r\n    );\r\n  } else if (filteredList) {\r\n    return filteredList.map((i, k) => (\r\n      <div key={k} className=\"GameItem\">\r\n        <h5>{i.title}</h5>\r\n        <p>Genre: {i.genre}</p>\r\n        <p>Platform: {i.platform}</p>\r\n        <p>Score: {i.score}</p>\r\n      </div>\r\n    ));\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport default Games;\r\n","import React, { useContext } from \"react\";\r\nimport AppContext from \"../state/appContext\";\r\nimport { Filter } from \"./\";\r\n\r\nconst Header = () => {\r\n  const state = useContext(AppContext);\r\n  const { onFilter } = state;\r\n  return (\r\n    <>\r\n      <h1 id=\"Header\" onClick={() => onFilter(\"All\")}>\r\n        Games Arena\r\n      </h1>\r\n      <Filter />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport AppState from \"./state/AppState\";\nimport { Header, Games } from \"./components\";\n\nconst App = () => {\n  return (\n    <AppState>\n      <div className=\"App\">\n        <header className=\"Header\">\n          <Header />\n        </header>\n        <div className=\"Games\">\n          <Games />\n        </div>\n      </div>\n    </AppState>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}